# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-04-22 12:39
from __future__ import unicode_literals

from lxml import etree

from django.db import migrations

from cobalt import Act, FrbrUri
from cobalt.uri import FRBR_URI_RE


def new_frbr_uri(uri, forward):
    """ Sets prefix on uri:
        'akn' if forward is True, None if it's False.
    """
    if not isinstance(uri, FrbrUri):
        uri = FrbrUri.parse(uri)
    uri.prefix = 'akn' if forward else None
    return uri


def handle_refs(document, cobalt_doc, forward):
    """ Finds hrefs in documents, of the form:

        href="/za/act/2012/22">Act no 22 of 2012
        href="/akn/za/act/2012/22">Act no 22 of 2012

        For each of these,
        if `forward` is True, it adds the /akn prefix
        if `forward` is False, it removes it

    """
    root = etree.fromstring(document.document_xml)
    path = etree.XPath("//a:*[starts-with(@href, '/')]", namespaces={'a': cobalt_doc.namespace})
    for node in path(root):
        ref = node.get('href')
        match = FRBR_URI_RE.match(ref)
        if match:
            ref = new_frbr_uri(ref, forward).work_uri()
            node.set('href', ref)

    document.document_xml = etree.tostring(root, encoding='utf-8').decode('utf-8')


def migrate_uris(apps, schema_editor, forward):
    """ Start or stop using AKN3 FRBR URIs (i.e. /akn prefix)
    - Update URIs of all existing works and documents
    - Update meta/identification block of each AKN document
    - Update hrefs in all documents
    """
    db_alias = schema_editor.connection.alias
    Work = apps.get_model("indigo_api", "Work")
    Document = apps.get_model("indigo_api", "Document")

    for work in Work.objects.using(db_alias).all():
        work.frbr_uri = new_frbr_uri(work.frbr_uri, forward)
        work.save()

    for doc in Document.objects.using(db_alias).all():
        doc.frbr_uri = doc.work.frbr_uri
        cobalt_doc = Act(doc.document_xml)
        cobalt_doc.frbr_uri = doc.frbr_uri
        doc.document_xml = cobalt_doc.to_xml()
        handle_refs(doc, cobalt_doc, forward)
        doc.save()


def migrate_forward(apps, schema_editor):
    migrate_uris(apps, schema_editor, forward=True)


def migrate_backward(apps, schema_editor):
    migrate_uris(apps, schema_editor, forward=False)


class Migration(migrations.Migration):

    dependencies = [
        ('indigo_api', '0128_rename_badges'),
    ]

    operations = [
        migrations.RunPython(migrate_forward, migrate_backward),
    ]
