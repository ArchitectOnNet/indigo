# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-04-22 12:39
from __future__ import unicode_literals

from django.db import migrations

from cobalt import Act, FrbrUri
from cobalt.uri import FRBR_URI_RE


def new_frbr_uri(uri, forward):
    """ Sets prefix on uri:
        'akn' if forward is True, None if it's False.
    """
    if not isinstance(uri, FrbrUri):
        uri = FrbrUri.parse(uri)
    uri.prefix = 'akn' if forward else None
    return uri.work_uri()


def migrate_uris(apps, schema_editor, forward):
    """ Start or stop using AKN3 FRBR URIs (i.e. /akn prefix)
    - Update URIs of all existing works and documents
    - Update meta/identification block of each AKN document
    - Update hrefs in all documents
    """
    db_alias = schema_editor.connection.alias
    Work = apps.get_model("indigo_api", "Work")
    Document = apps.get_model("indigo_api", "Document")

    for work in Work.objects.using(db_alias).all():
        work.frbr_uri = new_frbr_uri(work.frbr_uri, forward)
        work.save()

    for doc in Document.objects.using(db_alias).all():
        # Create a cobalt StructuredDocument from the document's existing XML
        cobalt_doc = Act(doc.document_xml)
        # Update the document object's FRBR URI based on the changes made to Works above
        doc.frbr_uri = doc.work.frbr_uri
        # Update the document's FRBR URI in the XML (meta/identification block)
        cobalt_doc.frbr_uri = doc.frbr_uri
        # Add (if forward=True) / remove (if forward=False)
        # `/akn` prefix to hrefs in <ref> or <passiveRef> AKN elements, e.g.
        # href="/za/act/2012/22" <--> href="/akn/za/act/2012/22"
        for node in cobalt_doc.root.xpath(
                "//a:*[self::a:ref or self::a:passiveRef][starts-with(@href, '/')]",
                namespaces={'a': cobalt_doc.namespace}):
            ref = node.get('href')
            if FRBR_URI_RE.match(ref):
                ref = new_frbr_uri(ref, forward)
                node.set('href', ref)
        # Update document's XML
        doc.document_xml = cobalt_doc.to_xml()
        doc.save()


def migrate_forward(apps, schema_editor):
    migrate_uris(apps, schema_editor, forward=True)


def migrate_backward(apps, schema_editor):
    migrate_uris(apps, schema_editor, forward=False)


class Migration(migrations.Migration):

    dependencies = [
        ('indigo_api', '0128_rename_badges'),
    ]

    operations = [
        migrations.RunPython(migrate_forward, migrate_backward),
    ]
